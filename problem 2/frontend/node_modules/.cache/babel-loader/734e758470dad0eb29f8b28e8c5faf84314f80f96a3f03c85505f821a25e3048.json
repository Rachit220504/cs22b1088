{"ast":null,"code":"var _jsxFileName = \"D:\\\\tp\\\\problem 2\\\\frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n// Make sure DOM is fully loaded before trying to access 'root'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndocument.addEventListener('DOMContentLoaded', () => {\n  const rootElement = document.getElementById('root');\n  if (rootElement) {\n    try {\n      const root = ReactDOM.createRoot(rootElement);\n      root.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n        children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this));\n    } catch (error) {\n      console.error('Failed to render React application:', error);\n      // Display a fallback error message in the DOM\n      document.body.innerHTML = `\n        <div style=\"color: red; text-align: center; margin-top: 50px;\">\n          <h1>Something went wrong</h1>\n          <p>${error.message}</p>\n        </div>\n      `;\n    }\n  } else {\n    console.error(\"Couldn't find root element to mount React application\");\n    document.body.innerHTML = `\n      <div style=\"color: red; text-align: center; margin-top: 50px;\">\n        <h1>Initialization Error</h1>\n        <p>Couldn't find the root element to mount the application.</p>\n      </div>\n    `;\n  }\n});","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","document","addEventListener","rootElement","getElementById","root","createRoot","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","error","console","body","innerHTML","message"],"sources":["D:/tp/problem 2/frontend/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n// Make sure DOM is fully loaded before trying to access 'root'\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const rootElement = document.getElementById('root');\r\n  \r\n  if (rootElement) {\r\n    try {\r\n      const root = ReactDOM.createRoot(rootElement);\r\n      root.render(\r\n        <React.StrictMode>\r\n          <App />\r\n        </React.StrictMode>\r\n      );\r\n    } catch (error) {\r\n      console.error('Failed to render React application:', error);\r\n      // Display a fallback error message in the DOM\r\n      document.body.innerHTML = `\r\n        <div style=\"color: red; text-align: center; margin-top: 50px;\">\r\n          <h1>Something went wrong</h1>\r\n          <p>${error.message}</p>\r\n        </div>\r\n      `;\r\n    }\r\n  } else {\r\n    console.error(\"Couldn't find root element to mount React application\");\r\n    document.body.innerHTML = `\r\n      <div style=\"color: red; text-align: center; margin-top: 50px;\">\r\n        <h1>Initialization Error</h1>\r\n        <p>Couldn't find the root element to mount the application.</p>\r\n      </div>\r\n    `;\r\n  }\r\n});\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAClD,MAAMC,WAAW,GAAGF,QAAQ,CAACG,cAAc,CAAC,MAAM,CAAC;EAEnD,IAAID,WAAW,EAAE;IACf,IAAI;MACF,MAAME,IAAI,GAAGR,QAAQ,CAACS,UAAU,CAACH,WAAW,CAAC;MAC7CE,IAAI,CAACE,MAAM,cACTP,OAAA,CAACJ,KAAK,CAACY,UAAU;QAAAC,QAAA,eACfT,OAAA,CAACF,GAAG;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACS,CACpB,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D;MACAb,QAAQ,CAACe,IAAI,CAACC,SAAS,GAAG;AAChC;AACA;AACA,eAAeH,KAAK,CAACI,OAAO;AAC5B;AACA,OAAO;IACH;EACF,CAAC,MAAM;IACLH,OAAO,CAACD,KAAK,CAAC,uDAAuD,CAAC;IACtEb,QAAQ,CAACe,IAAI,CAACC,SAAS,GAAG;AAC9B;AACA;AACA;AACA;AACA,KAAK;EACH;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}